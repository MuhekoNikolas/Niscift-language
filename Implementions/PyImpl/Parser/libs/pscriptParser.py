# Generated from ./pscriptParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .pscriptParserBase import pscriptParserBase
else:
    from pscriptParserBase import pscriptParserBase

def serializedATN():
    return [
        4,1,98,897,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,3,0,143,8,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,3,1,152,8,1,1,2,1,2,4,2,156,8,2,11,2,12,
        2,157,1,2,3,2,161,8,2,1,3,1,3,5,3,165,8,3,10,3,12,3,168,9,3,1,4,
        1,4,3,4,172,8,4,1,5,1,5,1,5,1,5,1,5,5,5,179,8,5,10,5,12,5,182,9,
        5,1,5,3,5,185,8,5,1,5,1,5,1,5,1,5,1,5,3,5,192,8,5,1,5,3,5,195,8,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,204,8,5,1,5,1,5,1,5,1,5,4,5,210,
        8,5,11,5,12,5,211,1,5,3,5,215,8,5,1,5,3,5,218,8,5,1,5,3,5,221,8,
        5,1,5,3,5,224,8,5,1,5,1,5,1,5,1,5,5,5,230,8,5,10,5,12,5,233,9,5,
        1,5,1,5,1,5,1,5,5,5,239,8,5,10,5,12,5,242,9,5,1,5,1,5,5,5,246,8,
        5,10,5,12,5,249,9,5,1,5,3,5,252,8,5,1,6,1,6,1,6,1,6,4,6,258,8,6,
        11,6,12,6,259,1,6,1,6,3,6,264,8,6,1,7,1,7,1,7,1,7,3,7,270,8,7,1,
        7,3,7,273,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,3,11,293,8,11,1,12,1,12,1,12,1,12,3,
        12,299,8,12,3,12,301,8,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,
        310,8,13,1,13,3,13,313,8,13,1,13,1,13,1,13,1,14,3,14,319,8,14,1,
        14,1,14,1,14,1,14,3,14,325,8,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,3,15,334,8,15,1,15,1,15,1,15,3,15,339,8,15,1,15,1,15,3,15,343,
        8,15,1,15,3,15,346,8,15,1,15,3,15,349,8,15,1,15,1,15,3,15,353,8,
        15,3,15,355,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,
        18,366,8,18,10,18,12,18,369,9,18,1,19,1,19,1,19,3,19,374,8,19,1,
        19,3,19,377,8,19,1,20,1,20,1,20,3,20,382,8,20,1,21,1,21,1,21,5,21,
        387,8,21,10,21,12,21,390,9,21,1,21,3,21,393,8,21,1,21,1,21,1,22,
        1,22,3,22,399,8,22,1,22,1,22,1,22,3,22,404,8,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,3,22,415,8,22,1,22,1,22,3,22,419,8,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
        433,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,441,8,22,1,22,1,22,3,
        22,445,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,465,8,23,1,24,1,24,1,
        24,1,24,1,24,5,24,472,8,24,10,24,12,24,475,9,24,1,24,1,24,3,24,479,
        8,24,1,25,1,25,1,25,5,25,484,8,25,10,25,12,25,487,9,25,1,26,5,26,
        490,8,26,10,26,12,26,493,9,26,1,26,1,26,4,26,497,8,26,11,26,12,26,
        498,3,26,501,8,26,1,27,1,27,1,27,5,27,506,8,27,10,27,12,27,509,9,
        27,1,28,1,28,1,28,1,28,1,28,3,28,516,8,28,3,28,518,8,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,31,4,31,527,8,31,11,31,12,31,528,1,31,3,31,
        532,8,31,1,31,3,31,535,8,31,1,32,1,32,1,32,1,33,1,33,1,33,3,33,543,
        8,33,1,34,1,34,1,34,5,34,548,8,34,10,34,12,34,551,9,34,1,34,3,34,
        554,8,34,1,35,1,35,1,35,5,35,559,8,35,10,35,12,35,562,9,35,1,35,
        3,35,565,8,35,1,36,1,36,1,36,3,36,570,8,36,1,37,1,37,1,37,5,37,575,
        8,37,10,37,12,37,578,9,37,1,38,1,38,1,38,3,38,583,8,38,1,39,1,39,
        1,39,1,39,1,39,1,39,3,39,591,8,39,1,39,1,39,3,39,595,8,39,1,39,1,
        39,3,39,599,8,39,1,40,1,40,1,40,3,40,604,8,40,1,40,1,40,1,40,3,40,
        609,8,40,1,40,1,40,3,40,613,8,40,1,40,3,40,616,8,40,1,40,3,40,619,
        8,40,1,40,1,40,3,40,623,8,40,3,40,625,8,40,1,41,1,41,1,41,5,41,630,
        8,41,10,41,12,41,633,9,41,1,42,1,42,1,42,3,42,638,8,42,1,42,3,42,
        641,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,
        653,8,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,661,8,45,10,45,12,45,
        664,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,3,46,678,8,46,1,46,1,46,1,46,3,46,683,8,46,3,46,685,8,46,1,
        46,5,46,688,8,46,10,46,12,46,691,9,46,1,47,1,47,3,47,695,8,47,1,
        47,1,47,5,47,699,8,47,10,47,12,47,702,9,47,1,47,1,47,3,47,706,8,
        47,1,47,1,47,1,47,5,47,711,8,47,10,47,12,47,714,9,47,1,48,1,48,1,
        48,3,48,719,8,48,1,48,1,48,1,48,3,48,724,8,48,1,48,1,48,1,48,3,48,
        729,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,739,8,48,1,
        48,1,48,1,48,1,48,3,48,745,8,48,1,48,1,48,1,48,3,48,750,8,48,1,49,
        1,49,1,49,5,49,755,8,49,10,49,12,49,758,9,49,1,50,1,50,1,50,1,50,
        1,51,1,51,1,51,3,51,767,8,51,1,52,1,52,1,53,1,53,1,53,5,53,774,8,
        53,10,53,12,53,777,9,53,1,54,1,54,1,54,1,54,1,54,1,54,5,54,785,8,
        54,10,54,12,54,788,9,54,1,55,1,55,3,55,792,8,55,1,56,1,56,1,57,1,
        57,1,57,3,57,799,8,57,1,58,1,58,1,59,1,59,3,59,805,8,59,1,60,1,60,
        1,61,1,61,1,61,3,61,812,8,61,1,61,3,61,815,8,61,1,62,1,62,3,62,819,
        8,62,1,62,1,62,1,62,1,62,1,62,3,62,826,8,62,1,63,1,63,1,63,5,63,
        831,8,63,10,63,12,63,834,9,63,1,63,3,63,837,8,63,1,64,1,64,1,64,
        3,64,842,8,64,1,64,1,64,3,64,846,8,64,1,65,1,65,1,65,5,65,851,8,
        65,10,65,12,65,854,9,65,1,65,3,65,857,8,65,1,66,1,66,1,66,3,66,862,
        8,66,1,66,3,66,865,8,66,3,66,867,8,66,1,66,1,66,3,66,871,8,66,1,
        66,3,66,874,8,66,3,66,876,8,66,1,67,1,67,3,67,880,8,67,1,68,1,68,
        1,68,1,68,1,68,3,68,887,8,68,1,69,1,69,1,69,1,69,3,69,893,8,69,3,
        69,895,8,69,1,69,0,4,90,92,94,108,70,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        0,9,1,1,3,3,1,0,40,42,2,0,40,40,42,42,2,0,50,50,71,78,2,0,56,57,
        61,61,3,0,45,45,49,49,56,60,1,0,38,39,1,0,80,83,2,0,45,45,49,49,
        996,0,142,1,0,0,0,2,151,1,0,0,0,4,160,1,0,0,0,6,162,1,0,0,0,8,171,
        1,0,0,0,10,251,1,0,0,0,12,263,1,0,0,0,14,265,1,0,0,0,16,276,1,0,
        0,0,18,281,1,0,0,0,20,285,1,0,0,0,22,289,1,0,0,0,24,294,1,0,0,0,
        26,305,1,0,0,0,28,318,1,0,0,0,30,354,1,0,0,0,32,356,1,0,0,0,34,359,
        1,0,0,0,36,362,1,0,0,0,38,376,1,0,0,0,40,378,1,0,0,0,42,383,1,0,
        0,0,44,444,1,0,0,0,46,464,1,0,0,0,48,466,1,0,0,0,50,480,1,0,0,0,
        52,500,1,0,0,0,54,502,1,0,0,0,56,510,1,0,0,0,58,519,1,0,0,0,60,521,
        1,0,0,0,62,534,1,0,0,0,64,536,1,0,0,0,66,539,1,0,0,0,68,544,1,0,
        0,0,70,555,1,0,0,0,72,566,1,0,0,0,74,571,1,0,0,0,76,579,1,0,0,0,
        78,598,1,0,0,0,80,624,1,0,0,0,82,626,1,0,0,0,84,640,1,0,0,0,86,642,
        1,0,0,0,88,645,1,0,0,0,90,652,1,0,0,0,92,665,1,0,0,0,94,705,1,0,
        0,0,96,749,1,0,0,0,98,751,1,0,0,0,100,759,1,0,0,0,102,766,1,0,0,
        0,104,768,1,0,0,0,106,770,1,0,0,0,108,778,1,0,0,0,110,791,1,0,0,
        0,112,793,1,0,0,0,114,798,1,0,0,0,116,800,1,0,0,0,118,802,1,0,0,
        0,120,806,1,0,0,0,122,814,1,0,0,0,124,825,1,0,0,0,126,827,1,0,0,
        0,128,845,1,0,0,0,130,847,1,0,0,0,132,875,1,0,0,0,134,877,1,0,0,
        0,136,881,1,0,0,0,138,894,1,0,0,0,140,143,3,4,2,0,141,143,3,6,3,
        0,142,140,1,0,0,0,142,141,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,
        0,144,145,5,0,0,1,145,1,1,0,0,0,146,152,5,3,0,0,147,152,3,42,21,
        0,148,149,3,10,5,0,149,150,5,3,0,0,150,152,1,0,0,0,151,146,1,0,0,
        0,151,147,1,0,0,0,151,148,1,0,0,0,152,3,1,0,0,0,153,156,5,3,0,0,
        154,156,3,8,4,0,155,153,1,0,0,0,155,154,1,0,0,0,156,157,1,0,0,0,
        157,155,1,0,0,0,157,158,1,0,0,0,158,161,1,0,0,0,159,161,3,2,1,0,
        160,155,1,0,0,0,160,159,1,0,0,0,161,5,1,0,0,0,162,166,3,106,53,0,
        163,165,5,3,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,
        166,167,1,0,0,0,167,7,1,0,0,0,168,166,1,0,0,0,169,172,3,42,21,0,
        170,172,3,10,5,0,171,169,1,0,0,0,171,170,1,0,0,0,172,9,1,0,0,0,173,
        174,5,13,0,0,174,175,3,78,39,0,175,176,5,47,0,0,176,180,3,12,6,0,
        177,179,3,16,8,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,
        180,181,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,183,185,3,18,9,0,
        184,183,1,0,0,0,184,185,1,0,0,0,185,252,1,0,0,0,186,187,5,16,0,0,
        187,188,3,78,39,0,188,189,5,47,0,0,189,191,3,12,6,0,190,192,3,18,
        9,0,191,190,1,0,0,0,191,192,1,0,0,0,192,252,1,0,0,0,193,195,5,35,
        0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,17,
        0,0,197,198,3,68,34,0,198,199,5,18,0,0,199,200,3,106,53,0,200,201,
        5,47,0,0,201,203,3,12,6,0,202,204,3,18,9,0,203,202,1,0,0,0,203,204,
        1,0,0,0,204,252,1,0,0,0,205,206,5,19,0,0,206,207,5,47,0,0,207,220,
        3,12,6,0,208,210,3,24,12,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,
        1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,215,3,18,9,0,214,213,
        1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,218,3,20,10,0,217,216,
        1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,0,219,221,3,20,10,0,220,209,
        1,0,0,0,220,219,1,0,0,0,221,252,1,0,0,0,222,224,5,35,0,0,223,222,
        1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,22,0,0,226,231,
        3,22,11,0,227,228,5,46,0,0,228,230,3,22,11,0,229,227,1,0,0,0,230,
        233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,
        231,1,0,0,0,234,235,5,47,0,0,235,236,3,12,6,0,236,252,1,0,0,0,237,
        239,3,14,7,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,
        241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,252,3,26,13,0,244,
        246,3,14,7,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,
        248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,252,3,28,14,0,251,
        173,1,0,0,0,251,186,1,0,0,0,251,194,1,0,0,0,251,205,1,0,0,0,251,
        223,1,0,0,0,251,240,1,0,0,0,251,247,1,0,0,0,252,11,1,0,0,0,253,264,
        3,42,21,0,254,255,5,3,0,0,255,257,5,1,0,0,256,258,3,8,4,0,257,256,
        1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,
        1,0,0,0,261,262,5,2,0,0,262,264,1,0,0,0,263,253,1,0,0,0,263,254,
        1,0,0,0,264,13,1,0,0,0,265,266,5,69,0,0,266,272,3,108,54,0,267,269,
        5,86,0,0,268,270,3,126,63,0,269,268,1,0,0,0,269,270,1,0,0,0,270,
        271,1,0,0,0,271,273,5,87,0,0,272,267,1,0,0,0,272,273,1,0,0,0,273,
        274,1,0,0,0,274,275,5,3,0,0,275,15,1,0,0,0,276,277,5,14,0,0,277,
        278,3,78,39,0,278,279,5,47,0,0,279,280,3,12,6,0,280,17,1,0,0,0,281,
        282,5,15,0,0,282,283,5,47,0,0,283,284,3,12,6,0,284,19,1,0,0,0,285,
        286,5,21,0,0,286,287,5,47,0,0,287,288,3,12,6,0,288,21,1,0,0,0,289,
        292,3,78,39,0,290,291,5,10,0,0,291,293,3,94,47,0,292,290,1,0,0,0,
        292,293,1,0,0,0,293,23,1,0,0,0,294,300,5,23,0,0,295,298,3,78,39,
        0,296,297,5,10,0,0,297,299,3,110,55,0,298,296,1,0,0,0,298,299,1,
        0,0,0,299,301,1,0,0,0,300,295,1,0,0,0,300,301,1,0,0,0,301,302,1,
        0,0,0,302,303,5,47,0,0,303,304,3,12,6,0,304,25,1,0,0,0,305,306,5,
        29,0,0,306,312,3,110,55,0,307,309,5,86,0,0,308,310,3,126,63,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,313,5,87,0,0,312,
        307,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,47,0,0,315,
        316,3,12,6,0,316,27,1,0,0,0,317,319,5,35,0,0,318,317,1,0,0,0,318,
        319,1,0,0,0,319,320,1,0,0,0,320,321,5,4,0,0,321,322,3,110,55,0,322,
        324,5,86,0,0,323,325,3,30,15,0,324,323,1,0,0,0,324,325,1,0,0,0,325,
        326,1,0,0,0,326,327,5,87,0,0,327,328,5,47,0,0,328,329,3,12,6,0,329,
        29,1,0,0,0,330,331,3,36,18,0,331,332,5,46,0,0,332,334,1,0,0,0,333,
        330,1,0,0,0,333,334,1,0,0,0,334,345,1,0,0,0,335,338,3,32,16,0,336,
        337,5,46,0,0,337,339,3,36,18,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
        342,1,0,0,0,340,341,5,46,0,0,341,343,3,34,17,0,342,340,1,0,0,0,342,
        343,1,0,0,0,343,346,1,0,0,0,344,346,3,34,17,0,345,335,1,0,0,0,345,
        344,1,0,0,0,346,348,1,0,0,0,347,349,5,46,0,0,348,347,1,0,0,0,348,
        349,1,0,0,0,349,355,1,0,0,0,350,352,3,36,18,0,351,353,5,46,0,0,352,
        351,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,333,1,0,0,0,354,
        350,1,0,0,0,355,31,1,0,0,0,356,357,5,45,0,0,357,358,3,40,20,0,358,
        33,1,0,0,0,359,360,5,49,0,0,360,361,3,40,20,0,361,35,1,0,0,0,362,
        367,3,38,19,0,363,364,5,46,0,0,364,366,3,38,19,0,365,363,1,0,0,0,
        366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,37,1,0,0,0,369,
        367,1,0,0,0,370,373,3,40,20,0,371,372,5,50,0,0,372,374,3,78,39,0,
        373,371,1,0,0,0,373,374,1,0,0,0,374,377,1,0,0,0,375,377,5,45,0,0,
        376,370,1,0,0,0,376,375,1,0,0,0,377,39,1,0,0,0,378,381,3,110,55,
        0,379,380,5,47,0,0,380,382,3,78,39,0,381,379,1,0,0,0,381,382,1,0,
        0,0,382,41,1,0,0,0,383,388,3,44,22,0,384,385,5,48,0,0,385,387,3,
        44,22,0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,
        1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,391,393,5,48,0,0,392,391,
        1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,7,0,0,0,395,43,1,
        0,0,0,396,445,3,46,23,0,397,399,5,36,0,0,398,397,1,0,0,0,398,399,
        1,0,0,0,399,400,1,0,0,0,400,401,3,96,48,0,401,403,5,86,0,0,402,404,
        3,126,63,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,
        5,87,0,0,406,445,1,0,0,0,407,408,5,31,0,0,408,445,3,68,34,0,409,
        445,5,32,0,0,410,445,5,34,0,0,411,445,5,33,0,0,412,414,5,5,0,0,413,
        415,3,106,53,0,414,413,1,0,0,0,414,415,1,0,0,0,415,445,1,0,0,0,416,
        418,5,6,0,0,417,419,3,56,28,0,418,417,1,0,0,0,418,419,1,0,0,0,419,
        445,1,0,0,0,420,445,3,118,59,0,421,422,5,8,0,0,422,445,3,74,37,0,
        423,424,5,7,0,0,424,425,3,52,26,0,425,432,5,8,0,0,426,433,5,45,0,
        0,427,428,5,86,0,0,428,429,3,70,35,0,429,430,5,87,0,0,430,433,1,
        0,0,0,431,433,3,70,35,0,432,426,1,0,0,0,432,427,1,0,0,0,432,431,
        1,0,0,0,433,445,1,0,0,0,434,435,5,11,0,0,435,445,3,54,27,0,436,437,
        5,12,0,0,437,440,3,78,39,0,438,439,5,46,0,0,439,441,3,78,39,0,440,
        438,1,0,0,0,440,441,1,0,0,0,441,445,1,0,0,0,442,443,5,9,0,0,443,
        445,3,54,27,0,444,396,1,0,0,0,444,398,1,0,0,0,444,407,1,0,0,0,444,
        409,1,0,0,0,444,410,1,0,0,0,444,411,1,0,0,0,444,412,1,0,0,0,444,
        416,1,0,0,0,444,420,1,0,0,0,444,421,1,0,0,0,444,423,1,0,0,0,444,
        434,1,0,0,0,444,436,1,0,0,0,444,442,1,0,0,0,445,45,1,0,0,0,446,447,
        3,60,30,0,447,448,3,48,24,0,448,449,5,48,0,0,449,465,1,0,0,0,450,
        451,3,58,29,0,451,452,3,48,24,0,452,453,3,66,33,0,453,465,1,0,0,
        0,454,455,3,58,29,0,455,456,3,50,25,0,456,457,3,66,33,0,457,465,
        1,0,0,0,458,459,3,48,24,0,459,460,3,66,33,0,460,465,1,0,0,0,461,
        462,3,50,25,0,462,463,3,66,33,0,463,465,1,0,0,0,464,446,1,0,0,0,
        464,450,1,0,0,0,464,454,1,0,0,0,464,458,1,0,0,0,464,461,1,0,0,0,
        465,47,1,0,0,0,466,473,3,108,54,0,467,468,5,90,0,0,468,469,3,94,
        47,0,469,470,5,91,0,0,470,472,1,0,0,0,471,467,1,0,0,0,472,475,1,
        0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,478,1,0,0,0,475,473,1,
        0,0,0,476,477,5,43,0,0,477,479,3,48,24,0,478,476,1,0,0,0,478,479,
        1,0,0,0,479,49,1,0,0,0,480,485,3,48,24,0,481,482,5,46,0,0,482,484,
        3,48,24,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,
        1,0,0,0,486,51,1,0,0,0,487,485,1,0,0,0,488,490,5,43,0,0,489,488,
        1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,
        1,0,0,0,493,491,1,0,0,0,494,501,3,108,54,0,495,497,5,43,0,0,496,
        495,1,0,0,0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
        501,1,0,0,0,500,491,1,0,0,0,500,496,1,0,0,0,501,53,1,0,0,0,502,507,
        3,108,54,0,503,504,5,46,0,0,504,506,3,108,54,0,505,503,1,0,0,0,506,
        509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,55,1,0,0,0,509,507,
        1,0,0,0,510,517,3,78,39,0,511,512,5,46,0,0,512,515,3,78,39,0,513,
        514,5,46,0,0,514,516,3,78,39,0,515,513,1,0,0,0,515,516,1,0,0,0,516,
        518,1,0,0,0,517,511,1,0,0,0,517,518,1,0,0,0,518,57,1,0,0,0,519,520,
        7,1,0,0,520,59,1,0,0,0,521,522,7,2,0,0,522,61,1,0,0,0,523,524,3,
        78,39,0,524,525,5,46,0,0,525,527,1,0,0,0,526,523,1,0,0,0,527,528,
        1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,532,
        3,78,39,0,531,530,1,0,0,0,531,532,1,0,0,0,532,535,1,0,0,0,533,535,
        3,106,53,0,534,526,1,0,0,0,534,533,1,0,0,0,535,63,1,0,0,0,536,537,
        5,45,0,0,537,538,3,94,47,0,538,65,1,0,0,0,539,542,7,3,0,0,540,543,
        3,118,59,0,541,543,3,106,53,0,542,540,1,0,0,0,542,541,1,0,0,0,543,
        67,1,0,0,0,544,549,3,94,47,0,545,546,5,46,0,0,546,548,3,94,47,0,
        547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,
        550,553,1,0,0,0,551,549,1,0,0,0,552,554,5,46,0,0,553,552,1,0,0,0,
        553,554,1,0,0,0,554,69,1,0,0,0,555,560,3,72,36,0,556,557,5,46,0,
        0,557,559,3,72,36,0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,
        0,0,560,561,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,563,565,5,46,
        0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,71,1,0,0,0,566,569,3,110,
        55,0,567,568,5,10,0,0,568,570,3,110,55,0,569,567,1,0,0,0,569,570,
        1,0,0,0,570,73,1,0,0,0,571,576,3,76,38,0,572,573,5,46,0,0,573,575,
        3,76,38,0,574,572,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,
        1,0,0,0,577,75,1,0,0,0,578,576,1,0,0,0,579,582,3,110,55,0,580,581,
        5,10,0,0,581,583,3,110,55,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
        77,1,0,0,0,584,590,3,90,45,0,585,586,5,13,0,0,586,587,3,90,45,0,
        587,588,5,15,0,0,588,589,3,78,39,0,589,591,1,0,0,0,590,585,1,0,0,
        0,590,591,1,0,0,0,591,599,1,0,0,0,592,594,5,24,0,0,593,595,3,80,
        40,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,47,
        0,0,597,599,3,78,39,0,598,584,1,0,0,0,598,592,1,0,0,0,599,79,1,0,
        0,0,600,601,3,82,41,0,601,602,5,46,0,0,602,604,1,0,0,0,603,600,1,
        0,0,0,603,604,1,0,0,0,604,615,1,0,0,0,605,608,3,86,43,0,606,607,
        5,46,0,0,607,609,3,82,41,0,608,606,1,0,0,0,608,609,1,0,0,0,609,612,
        1,0,0,0,610,611,5,46,0,0,611,613,3,88,44,0,612,610,1,0,0,0,612,613,
        1,0,0,0,613,616,1,0,0,0,614,616,3,88,44,0,615,605,1,0,0,0,615,614,
        1,0,0,0,616,618,1,0,0,0,617,619,5,46,0,0,618,617,1,0,0,0,618,619,
        1,0,0,0,619,625,1,0,0,0,620,622,3,82,41,0,621,623,5,46,0,0,622,621,
        1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,603,1,0,0,0,624,620,
        1,0,0,0,625,81,1,0,0,0,626,631,3,84,42,0,627,628,5,46,0,0,628,630,
        3,84,42,0,629,627,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,
        1,0,0,0,632,83,1,0,0,0,633,631,1,0,0,0,634,637,3,110,55,0,635,636,
        5,50,0,0,636,638,3,78,39,0,637,635,1,0,0,0,637,638,1,0,0,0,638,641,
        1,0,0,0,639,641,5,45,0,0,640,634,1,0,0,0,640,639,1,0,0,0,641,85,
        1,0,0,0,642,643,5,45,0,0,643,644,3,110,55,0,644,87,1,0,0,0,645,646,
        5,49,0,0,646,647,3,110,55,0,647,89,1,0,0,0,648,649,6,45,-1,0,649,
        653,3,92,46,0,650,651,5,27,0,0,651,653,3,90,45,3,652,648,1,0,0,0,
        652,650,1,0,0,0,653,662,1,0,0,0,654,655,10,2,0,0,655,656,5,26,0,
        0,656,661,3,90,45,3,657,658,10,1,0,0,658,659,5,25,0,0,659,661,3,
        90,45,2,660,654,1,0,0,0,660,657,1,0,0,0,661,664,1,0,0,0,662,660,
        1,0,0,0,662,663,1,0,0,0,663,91,1,0,0,0,664,662,1,0,0,0,665,666,6,
        46,-1,0,666,667,3,94,47,0,667,689,1,0,0,0,668,684,10,2,0,0,669,685,
        5,62,0,0,670,685,5,63,0,0,671,685,5,64,0,0,672,685,5,65,0,0,673,
        685,5,66,0,0,674,685,5,67,0,0,675,685,5,68,0,0,676,678,5,27,0,0,
        677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,685,5,18,0,0,
        680,682,5,28,0,0,681,683,5,27,0,0,682,681,1,0,0,0,682,683,1,0,0,
        0,683,685,1,0,0,0,684,669,1,0,0,0,684,670,1,0,0,0,684,671,1,0,0,
        0,684,672,1,0,0,0,684,673,1,0,0,0,684,674,1,0,0,0,684,675,1,0,0,
        0,684,677,1,0,0,0,684,680,1,0,0,0,685,686,1,0,0,0,686,688,3,92,46,
        3,687,668,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,
        0,690,93,1,0,0,0,691,689,1,0,0,0,692,694,6,47,-1,0,693,695,5,36,
        0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,700,3,96,
        48,0,697,699,3,122,61,0,698,697,1,0,0,0,699,702,1,0,0,0,700,698,
        1,0,0,0,700,701,1,0,0,0,701,706,1,0,0,0,702,700,1,0,0,0,703,704,
        7,4,0,0,704,706,3,94,47,2,705,692,1,0,0,0,705,703,1,0,0,0,706,712,
        1,0,0,0,707,708,10,1,0,0,708,709,7,5,0,0,709,711,3,94,47,2,710,707,
        1,0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,95,1,
        0,0,0,714,712,1,0,0,0,715,718,5,86,0,0,716,719,3,118,59,0,717,719,
        3,106,53,0,718,716,1,0,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,
        1,0,0,0,720,750,5,87,0,0,721,723,5,90,0,0,722,724,3,106,53,0,723,
        722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,750,5,91,0,0,726,
        728,5,88,0,0,727,729,3,98,49,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
        730,1,0,0,0,730,750,5,89,0,0,731,732,5,88,0,0,732,733,3,104,52,0,
        733,734,5,89,0,0,734,750,1,0,0,0,735,736,5,44,0,0,736,738,3,106,
        53,0,737,739,5,46,0,0,738,737,1,0,0,0,738,739,1,0,0,0,739,740,1,
        0,0,0,740,741,5,44,0,0,741,750,1,0,0,0,742,750,3,110,55,0,743,745,
        5,57,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,750,
        3,114,57,0,747,750,5,20,0,0,748,750,5,79,0,0,749,715,1,0,0,0,749,
        721,1,0,0,0,749,726,1,0,0,0,749,731,1,0,0,0,749,735,1,0,0,0,749,
        742,1,0,0,0,749,744,1,0,0,0,749,747,1,0,0,0,749,748,1,0,0,0,750,
        97,1,0,0,0,751,756,3,100,50,0,752,753,5,46,0,0,753,755,3,100,50,
        0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,
        0,757,99,1,0,0,0,758,756,1,0,0,0,759,760,3,102,51,0,760,761,5,47,
        0,0,761,762,3,78,39,0,762,101,1,0,0,0,763,767,3,114,57,0,764,767,
        3,110,55,0,765,767,5,79,0,0,766,763,1,0,0,0,766,764,1,0,0,0,766,
        765,1,0,0,0,767,103,1,0,0,0,768,769,3,106,53,0,769,105,1,0,0,0,770,
        775,3,78,39,0,771,772,5,46,0,0,772,774,3,78,39,0,773,771,1,0,0,0,
        774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,107,1,0,0,0,
        777,775,1,0,0,0,778,779,6,54,-1,0,779,780,3,110,55,0,780,786,1,0,
        0,0,781,782,10,2,0,0,782,783,5,43,0,0,783,785,3,110,55,0,784,781,
        1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,109,
        1,0,0,0,788,786,1,0,0,0,789,792,5,92,0,0,790,792,3,112,56,0,791,
        789,1,0,0,0,791,790,1,0,0,0,792,111,1,0,0,0,793,794,7,6,0,0,794,
        113,1,0,0,0,795,799,3,116,58,0,796,799,5,84,0,0,797,799,5,85,0,0,
        798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,0,0,0,799,115,1,0,0,0,
        800,801,7,7,0,0,801,117,1,0,0,0,802,804,5,30,0,0,803,805,3,120,60,
        0,804,803,1,0,0,0,804,805,1,0,0,0,805,119,1,0,0,0,806,807,3,106,
        53,0,807,121,1,0,0,0,808,809,5,43,0,0,809,811,3,110,55,0,810,812,
        3,124,62,0,811,810,1,0,0,0,811,812,1,0,0,0,812,815,1,0,0,0,813,815,
        3,124,62,0,814,808,1,0,0,0,814,813,1,0,0,0,815,123,1,0,0,0,816,818,
        5,86,0,0,817,819,3,126,63,0,818,817,1,0,0,0,818,819,1,0,0,0,819,
        820,1,0,0,0,820,826,5,87,0,0,821,822,5,90,0,0,822,823,3,130,65,0,
        823,824,5,91,0,0,824,826,1,0,0,0,825,816,1,0,0,0,825,821,1,0,0,0,
        826,125,1,0,0,0,827,832,3,128,64,0,828,829,5,46,0,0,829,831,3,128,
        64,0,830,828,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,
        0,0,833,836,1,0,0,0,834,832,1,0,0,0,835,837,5,46,0,0,836,835,1,0,
        0,0,836,837,1,0,0,0,837,127,1,0,0,0,838,841,3,78,39,0,839,840,5,
        50,0,0,840,842,3,78,39,0,841,839,1,0,0,0,841,842,1,0,0,0,842,846,
        1,0,0,0,843,844,7,8,0,0,844,846,3,78,39,0,845,838,1,0,0,0,845,843,
        1,0,0,0,846,129,1,0,0,0,847,852,3,132,66,0,848,849,5,46,0,0,849,
        851,3,132,66,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,
        853,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,855,857,5,46,0,0,856,
        855,1,0,0,0,856,857,1,0,0,0,857,131,1,0,0,0,858,866,3,78,39,0,859,
        861,5,47,0,0,860,862,3,78,39,0,861,860,1,0,0,0,861,862,1,0,0,0,862,
        864,1,0,0,0,863,865,3,134,67,0,864,863,1,0,0,0,864,865,1,0,0,0,865,
        867,1,0,0,0,866,859,1,0,0,0,866,867,1,0,0,0,867,876,1,0,0,0,868,
        870,5,47,0,0,869,871,3,78,39,0,870,869,1,0,0,0,870,871,1,0,0,0,871,
        873,1,0,0,0,872,874,3,134,67,0,873,872,1,0,0,0,873,874,1,0,0,0,874,
        876,1,0,0,0,875,858,1,0,0,0,875,868,1,0,0,0,876,133,1,0,0,0,877,
        879,5,47,0,0,878,880,3,78,39,0,879,878,1,0,0,0,879,880,1,0,0,0,880,
        135,1,0,0,0,881,882,5,17,0,0,882,883,3,68,34,0,883,884,5,18,0,0,
        884,886,3,90,45,0,885,887,3,138,69,0,886,885,1,0,0,0,886,887,1,0,
        0,0,887,137,1,0,0,0,888,895,3,136,68,0,889,890,5,13,0,0,890,892,
        3,78,39,0,891,893,3,138,69,0,892,891,1,0,0,0,892,893,1,0,0,0,893,
        895,1,0,0,0,894,888,1,0,0,0,894,889,1,0,0,0,895,139,1,0,0,0,130,
        142,151,155,157,160,166,171,180,184,191,194,203,211,214,217,220,
        223,231,240,247,251,259,263,269,272,292,298,300,309,312,318,324,
        333,338,342,345,348,352,354,367,373,376,381,388,392,398,403,414,
        418,432,440,444,464,473,478,485,491,498,500,507,515,517,528,531,
        534,542,549,553,560,564,569,576,582,590,594,598,603,608,612,615,
        618,622,624,631,637,640,652,660,662,677,682,684,689,694,700,705,
        712,718,723,728,738,744,749,756,766,775,786,791,798,804,811,814,
        818,825,832,836,841,845,852,856,861,864,866,870,873,875,879,886,
        892,894
    ]

class pscriptParser ( pscriptParserBase ):

    grammarFileName = "pscriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "<INVALID>", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "<INVALID>", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'exec'", "<INVALID>", "<INVALID>", "'var'", 
                     "'const'", "'let'", "'.'", "'`'", "'*'", "','", "':'", 
                     "';'", "'**'", "'='", "'|'", "'^'", "'&'", "'<<'", 
                     "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'^='", "'**='", "'//='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "EXEC", "TRUE", "FALSE", "VAR", "CONST", "LET", "DOT", 
                      "REVERSE_QUOTE", "STAR", "COMMA", "COLON", "SEMI_COLON", 
                      "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", 
                      "NOT_OP", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                      "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "XOR_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "STRING", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "IMAG_NUMBER", "FLOAT_NUMBER", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "NAME", "LINE_JOIN", "NEWLINE", "WS", "TRAILING_SPACES", 
                      "COMMENT", "ML_COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_compound_stmt = 5
    RULE_suite = 6
    RULE_decorator = 7
    RULE_elif_clause = 8
    RULE_else_clause = 9
    RULE_finally_clause = 10
    RULE_with_item = 11
    RULE_except_clause = 12
    RULE_classdef = 13
    RULE_funcdef = 14
    RULE_typedargslist = 15
    RULE_args = 16
    RULE_kwargs = 17
    RULE_def_parameters = 18
    RULE_def_parameter = 19
    RULE_named_parameter = 20
    RULE_simple_stmt = 21
    RULE_small_stmt = 22
    RULE_variable_def = 23
    RULE_variable_def_name = 24
    RULE_variable_def_comma_name = 25
    RULE_from_where = 26
    RULE_comma_name = 27
    RULE_comma_test = 28
    RULE_variable_def_consts = 29
    RULE_variable_def_consts_with_colon = 30
    RULE_testlist_star_expr = 31
    RULE_star_expr = 32
    RULE_assign_part = 33
    RULE_exprlist = 34
    RULE_import_as_names = 35
    RULE_import_as_name = 36
    RULE_name_as_names = 37
    RULE_name_as_name = 38
    RULE_test = 39
    RULE_varargslist = 40
    RULE_vardef_parameters = 41
    RULE_vardef_parameter = 42
    RULE_varargs = 43
    RULE_varkwargs = 44
    RULE_logical_test = 45
    RULE_comparison = 46
    RULE_expr = 47
    RULE_atom = 48
    RULE_dictmaker = 49
    RULE_dictItem = 50
    RULE_dictKey = 51
    RULE_setmaker = 52
    RULE_testlist = 53
    RULE_dotted_name = 54
    RULE_name = 55
    RULE_bool = 56
    RULE_number = 57
    RULE_integer = 58
    RULE_yield_expr = 59
    RULE_yield_arg = 60
    RULE_trailer = 61
    RULE_arguments = 62
    RULE_arglist = 63
    RULE_argument = 64
    RULE_subscriptlist = 65
    RULE_subscript = 66
    RULE_sliceop = 67
    RULE_comp_for = 68
    RULE_comp_iter = 69

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "decorator", "elif_clause", 
                   "else_clause", "finally_clause", "with_item", "except_clause", 
                   "classdef", "funcdef", "typedargslist", "args", "kwargs", 
                   "def_parameters", "def_parameter", "named_parameter", 
                   "simple_stmt", "small_stmt", "variable_def", "variable_def_name", 
                   "variable_def_comma_name", "from_where", "comma_name", 
                   "comma_test", "variable_def_consts", "variable_def_consts_with_colon", 
                   "testlist_star_expr", "star_expr", "assign_part", "exprlist", 
                   "import_as_names", "import_as_name", "name_as_names", 
                   "name_as_name", "test", "varargslist", "vardef_parameters", 
                   "vardef_parameter", "varargs", "varkwargs", "logical_test", 
                   "comparison", "expr", "atom", "dictmaker", "dictItem", 
                   "dictKey", "setmaker", "testlist", "dotted_name", "name", 
                   "bool", "number", "integer", "yield_expr", "yield_arg", 
                   "trailer", "arguments", "arglist", "argument", "subscriptlist", 
                   "subscript", "sliceop", "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    EXEC=37
    TRUE=38
    FALSE=39
    VAR=40
    CONST=41
    LET=42
    DOT=43
    REVERSE_QUOTE=44
    STAR=45
    COMMA=46
    COLON=47
    SEMI_COLON=48
    POWER=49
    ASSIGN=50
    OR_OP=51
    XOR=52
    AND_OP=53
    LEFT_SHIFT=54
    RIGHT_SHIFT=55
    ADD=56
    MINUS=57
    DIV=58
    MOD=59
    IDIV=60
    NOT_OP=61
    LESS_THAN=62
    GREATER_THAN=63
    EQUALS=64
    GT_EQ=65
    LT_EQ=66
    NOT_EQ_1=67
    NOT_EQ_2=68
    AT=69
    ARROW=70
    ADD_ASSIGN=71
    SUB_ASSIGN=72
    MULT_ASSIGN=73
    DIV_ASSIGN=74
    MOD_ASSIGN=75
    XOR_ASSIGN=76
    POWER_ASSIGN=77
    IDIV_ASSIGN=78
    STRING=79
    DECIMAL_INTEGER=80
    OCT_INTEGER=81
    HEX_INTEGER=82
    BIN_INTEGER=83
    IMAG_NUMBER=84
    FLOAT_NUMBER=85
    OPEN_PAREN=86
    CLOSE_PAREN=87
    OPEN_BRACE=88
    CLOSE_BRACE=89
    OPEN_BRACKET=90
    CLOSE_BRACKET=91
    NAME=92
    LINE_JOIN=93
    NEWLINE=94
    WS=95
    TRAILING_SPACES=96
    COMMENT=97
    ML_COMMENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(pscriptParser.EOF, 0)

        def file_input(self):
            return self.getTypedRuleContext(pscriptParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(pscriptParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = pscriptParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 140
                self.file_input()

            elif la_ == 2:
                self.state = 141
                self.eval_input()


            self.state = 144
            self.match(pscriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(pscriptParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(pscriptParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(pscriptParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = pscriptParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.match(pscriptParser.LINE_BREAK)
                pass
            elif token in [5, 6, 7, 8, 9, 11, 12, 20, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 57, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 22, 29, 35, 69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.compound_stmt()
                self.state = 149
                self.match(pscriptParser.LINE_BREAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.LINE_BREAK)
            else:
                return self.getToken(pscriptParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.StmtContext)
            else:
                return self.getTypedRuleContext(pscriptParser.StmtContext,i)


        def single_input(self):
            return self.getTypedRuleContext(pscriptParser.Single_inputContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = pscriptParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.state = 160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 155 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 155
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3]:
                        self.state = 153
                        self.match(pscriptParser.LINE_BREAK)
                        pass
                    elif token in [4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 19, 20, 22, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 57, 69, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                        self.state = 154
                        self.stmt()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 157 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 144141438385077240) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 11271169) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.single_input()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.LINE_BREAK)
            else:
                return self.getToken(pscriptParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = pscriptParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.testlist()
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 163
                self.match(pscriptParser.LINE_BREAK)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(pscriptParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(pscriptParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = pscriptParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 20, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 57, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 169
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 22, 29, 35, 69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 170
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pscriptParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(pscriptParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)

        def else_clause(self):
            return self.getTypedRuleContext(pscriptParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def funcdef(self):
            return self.getTypedRuleContext(pscriptParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(pscriptParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_def_stmt" ):
                listener.enterFunc_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_def_stmt" ):
                listener.exitFunc_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_def_stmt" ):
                return visitor.visitFunc_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(pscriptParser.TRY, 0)
        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(pscriptParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(pscriptParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.cond = None # TestContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(pscriptParser.IF, 0)
        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(pscriptParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(pscriptParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.With_itemContext)
            else:
                return self.getTypedRuleContext(pscriptParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(pscriptParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(pscriptParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(pscriptParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(pscriptParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(pscriptParser.ASYNC, 0)
        def else_clause(self):
            return self.getTypedRuleContext(pscriptParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(pscriptParser.ClassdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(pscriptParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_def_stmt" ):
                listener.enterClass_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_def_stmt" ):
                listener.exitClass_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def_stmt" ):
                return visitor.visitClass_def_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = pscriptParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                localctx = pscriptParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 173
                self.match(pscriptParser.IF)
                self.state = 174
                localctx.cond = self.test()
                self.state = 175
                self.match(pscriptParser.COLON)
                self.state = 176
                self.suite()
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==14:
                    self.state = 177
                    self.elif_clause()
                    self.state = 182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 183
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = pscriptParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.match(pscriptParser.WHILE)
                self.state = 187
                self.test()
                self.state = 188
                self.match(pscriptParser.COLON)
                self.state = 189
                self.suite()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 190
                    self.else_clause()


                pass

            elif la_ == 3:
                localctx = pscriptParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 193
                    self.match(pscriptParser.ASYNC)


                self.state = 196
                self.match(pscriptParser.FOR)
                self.state = 197
                self.exprlist()
                self.state = 198
                self.match(pscriptParser.IN)
                self.state = 199
                self.testlist()
                self.state = 200
                self.match(pscriptParser.COLON)
                self.state = 201
                self.suite()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 202
                    self.else_clause()


                pass

            elif la_ == 4:
                localctx = pscriptParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 205
                self.match(pscriptParser.TRY)
                self.state = 206
                self.match(pscriptParser.COLON)
                self.state = 207
                self.suite()
                self.state = 220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 209 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 208
                        self.except_clause()
                        self.state = 211 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==23):
                            break

                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==15:
                        self.state = 213
                        self.else_clause()


                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 216
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 219
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = pscriptParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 222
                    self.match(pscriptParser.ASYNC)


                self.state = 225
                self.match(pscriptParser.WITH)
                self.state = 226
                self.with_item()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==46:
                    self.state = 227
                    self.match(pscriptParser.COMMA)
                    self.state = 228
                    self.with_item()
                    self.state = 233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 234
                self.match(pscriptParser.COLON)
                self.state = 235
                self.suite()
                pass

            elif la_ == 6:
                localctx = pscriptParser.Class_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==69:
                    self.state = 237
                    self.decorator()
                    self.state = 242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 243
                self.classdef()
                pass

            elif la_ == 7:
                localctx = pscriptParser.Func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==69:
                    self.state = 244
                    self.decorator()
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 250
                self.funcdef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(pscriptParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(pscriptParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(pscriptParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(pscriptParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.StmtContext)
            else:
                return self.getTypedRuleContext(pscriptParser.StmtContext,i)


        def getRuleIndex(self):
            return pscriptParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = pscriptParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 20, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 57, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.simple_stmt()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.match(pscriptParser.LINE_BREAK)
                self.state = 255
                self.match(pscriptParser.INDENT)
                self.state = 257 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 256
                    self.stmt()
                    self.state = 259 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 144141438385077232) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 11271169) != 0)):
                        break

                self.state = 261
                self.match(pscriptParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(pscriptParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(pscriptParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(pscriptParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(pscriptParser.ArglistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = pscriptParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(pscriptParser.AT)
            self.state = 266
            self.dotted_name(0)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 267
                self.match(pscriptParser.OPEN_PAREN)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522632411344273408) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 268
                    self.arglist()


                self.state = 271
                self.match(pscriptParser.CLOSE_PAREN)


            self.state = 274
            self.match(pscriptParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(pscriptParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = pscriptParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(pscriptParser.ELIF)
            self.state = 277
            self.test()
            self.state = 278
            self.match(pscriptParser.COLON)
            self.state = 279
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(pscriptParser.ELSE, 0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = pscriptParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(pscriptParser.ELSE)
            self.state = 282
            self.match(pscriptParser.COLON)
            self.state = 283
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(pscriptParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = pscriptParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(pscriptParser.FINALLY)
            self.state = 286
            self.match(pscriptParser.COLON)
            self.state = 287
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def AS(self):
            return self.getToken(pscriptParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(pscriptParser.ExprContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = pscriptParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.test()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 290
                self.match(pscriptParser.AS)
                self.state = 291
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(pscriptParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def AS(self):
            return self.getToken(pscriptParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = pscriptParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(pscriptParser.EXCEPT)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                self.state = 295
                self.test()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 296
                    self.match(pscriptParser.AS)
                    self.state = 297
                    self.name()




            self.state = 302
            self.match(pscriptParser.COLON)
            self.state = 303
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(pscriptParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(pscriptParser.ArglistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = pscriptParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(pscriptParser.CLASS)
            self.state = 306
            self.name()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 307
                self.match(pscriptParser.OPEN_PAREN)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522632411344273408) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 308
                    self.arglist()


                self.state = 311
                self.match(pscriptParser.CLOSE_PAREN)


            self.state = 314
            self.match(pscriptParser.COLON)
            self.state = 315
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(pscriptParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(pscriptParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(pscriptParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(pscriptParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = pscriptParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 317
                self.match(pscriptParser.ASYNC)


            self.state = 320
            self.match(pscriptParser.DEF)
            self.state = 321
            self.name()
            self.state = 322
            self.match(pscriptParser.OPEN_PAREN)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 18014398509484163) != 0):
                self.state = 323
                self.typedargslist()


            self.state = 326
            self.match(pscriptParser.CLOSE_PAREN)
            self.state = 327
            self.match(pscriptParser.COLON)
            self.state = 328
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(pscriptParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(pscriptParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = pscriptParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 330
                    self.def_parameters()
                    self.state = 331
                    self.match(pscriptParser.COMMA)


                self.state = 345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 335
                    self.args()
                    self.state = 338
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 336
                        self.match(pscriptParser.COMMA)
                        self.state = 337
                        self.def_parameters()


                    self.state = 342
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 340
                        self.match(pscriptParser.COMMA)
                        self.state = 341
                        self.kwargs()


                    pass
                elif token in [49]:
                    self.state = 344
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 347
                    self.match(pscriptParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.def_parameters()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 351
                    self.match(pscriptParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(pscriptParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = pscriptParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(pscriptParser.STAR)
            self.state = 357
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(pscriptParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(pscriptParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = pscriptParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(pscriptParser.POWER)
            self.state = 360
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = pscriptParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.def_parameter()
            self.state = 367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 363
                    self.match(pscriptParser.COMMA)
                    self.state = 364
                    self.def_parameter() 
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(pscriptParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(pscriptParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = pscriptParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self.named_parameter()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 371
                    self.match(pscriptParser.ASSIGN)
                    self.state = 372
                    self.test()


                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.match(pscriptParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = pscriptParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.name()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 379
                self.match(pscriptParser.COLON)
                self.state = 380
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(pscriptParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(pscriptParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.SEMI_COLON)
            else:
                return self.getToken(pscriptParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = pscriptParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.small_stmt()
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 384
                    self.match(pscriptParser.SEMI_COLON)
                    self.state = 385
                    self.small_stmt() 
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 391
                self.match(pscriptParser.SEMI_COLON)


            self.state = 394
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pscriptParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(pscriptParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)

        def COMMA(self):
            return self.getToken(pscriptParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Func_call_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(pscriptParser.AtomContext,0)

        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)
        def AWAIT(self):
            return self.getToken(pscriptParser.AWAIT, 0)
        def arglist(self):
            return self.getTypedRuleContext(pscriptParser.ArglistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call_stmt" ):
                listener.enterFunc_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call_stmt" ):
                listener.exitFunc_call_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call_stmt" ):
                return visitor.visitFunc_call_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(pscriptParser.NONLOCAL, 0)
        def comma_name(self):
            return self.getTypedRuleContext(pscriptParser.Comma_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(pscriptParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Variable_def_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_def(self):
            return self.getTypedRuleContext(pscriptParser.Variable_defContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def_stmt" ):
                listener.enterVariable_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def_stmt" ):
                listener.exitVariable_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def_stmt" ):
                return visitor.visitVariable_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(pscriptParser.IMPORT, 0)
        def name_as_names(self):
            return self.getTypedRuleContext(pscriptParser.Name_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(pscriptParser.FROM, 0)
        def from_where(self):
            return self.getTypedRuleContext(pscriptParser.From_whereContext,0)

        def IMPORT(self):
            return self.getToken(pscriptParser.IMPORT, 0)
        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(pscriptParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_import_stmt" ):
                listener.enterFrom_import_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_import_stmt" ):
                listener.exitFrom_import_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_import_stmt" ):
                return visitor.visitFrom_import_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(pscriptParser.RAISE, 0)
        def comma_test(self):
            return self.getTypedRuleContext(pscriptParser.Comma_testContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(pscriptParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(pscriptParser.GLOBAL, 0)
        def comma_name(self):
            return self.getTypedRuleContext(pscriptParser.Comma_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(pscriptParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(pscriptParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(pscriptParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(pscriptParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a pscriptParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(pscriptParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = pscriptParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = pscriptParser.Variable_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.variable_def()
                pass

            elif la_ == 2:
                localctx = pscriptParser.Func_call_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 397
                    self.match(pscriptParser.AWAIT)


                self.state = 400
                self.atom()
                self.state = 401
                self.match(pscriptParser.OPEN_PAREN)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522632411344273408) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 402
                    self.arglist()


                self.state = 405
                self.match(pscriptParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                localctx = pscriptParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.match(pscriptParser.DEL)
                self.state = 408
                self.exprlist()
                pass

            elif la_ == 4:
                localctx = pscriptParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 409
                self.match(pscriptParser.PASS)
                pass

            elif la_ == 5:
                localctx = pscriptParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 410
                self.match(pscriptParser.BREAK)
                pass

            elif la_ == 6:
                localctx = pscriptParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 411
                self.match(pscriptParser.CONTINUE)
                pass

            elif la_ == 7:
                localctx = pscriptParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 412
                self.match(pscriptParser.RETURN)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 413
                    self.testlist()


                pass

            elif la_ == 8:
                localctx = pscriptParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 416
                self.match(pscriptParser.RAISE)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 417
                    self.comma_test()


                pass

            elif la_ == 9:
                localctx = pscriptParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 420
                self.yield_expr()
                pass

            elif la_ == 10:
                localctx = pscriptParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 421
                self.match(pscriptParser.IMPORT)
                self.state = 422
                self.name_as_names()
                pass

            elif la_ == 11:
                localctx = pscriptParser.From_import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 423
                self.match(pscriptParser.FROM)
                self.state = 424
                self.from_where()
                self.state = 425
                self.match(pscriptParser.IMPORT)
                self.state = 432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 426
                    self.match(pscriptParser.STAR)
                    pass
                elif token in [86]:
                    self.state = 427
                    self.match(pscriptParser.OPEN_PAREN)
                    self.state = 428
                    self.import_as_names()
                    self.state = 429
                    self.match(pscriptParser.CLOSE_PAREN)
                    pass
                elif token in [38, 39, 92]:
                    self.state = 431
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = pscriptParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 434
                self.match(pscriptParser.GLOBAL)
                self.state = 435
                self.comma_name()
                pass

            elif la_ == 13:
                localctx = pscriptParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 436
                self.match(pscriptParser.ASSERT)
                self.state = 437
                self.test()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 438
                    self.match(pscriptParser.COMMA)
                    self.state = 439
                    self.test()


                pass

            elif la_ == 14:
                localctx = pscriptParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 442
                self.match(pscriptParser.NONLOCAL)
                self.state = 443
                self.comma_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_def_consts_with_colon(self):
            return self.getTypedRuleContext(pscriptParser.Variable_def_consts_with_colonContext,0)


        def variable_def_name(self):
            return self.getTypedRuleContext(pscriptParser.Variable_def_nameContext,0)


        def SEMI_COLON(self):
            return self.getToken(pscriptParser.SEMI_COLON, 0)

        def variable_def_consts(self):
            return self.getTypedRuleContext(pscriptParser.Variable_def_constsContext,0)


        def assign_part(self):
            return self.getTypedRuleContext(pscriptParser.Assign_partContext,0)


        def variable_def_comma_name(self):
            return self.getTypedRuleContext(pscriptParser.Variable_def_comma_nameContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_variable_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def" ):
                listener.enterVariable_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def" ):
                listener.exitVariable_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def" ):
                return visitor.visitVariable_def(self)
            else:
                return visitor.visitChildren(self)




    def variable_def(self):

        localctx = pscriptParser.Variable_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_variable_def)
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.variable_def_consts_with_colon()
                self.state = 447
                self.variable_def_name()
                self.state = 448
                self.match(pscriptParser.SEMI_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 450
                self.variable_def_consts()
                self.state = 451
                self.variable_def_name()
                self.state = 452
                self.assign_part()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 454
                self.variable_def_consts()
                self.state = 455
                self.variable_def_comma_name()
                self.state = 456
                self.assign_part()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.variable_def_name()
                self.state = 459
                self.assign_part()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 461
                self.variable_def_comma_name()
                self.state = 462
                self.assign_part()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_def_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(pscriptParser.Dotted_nameContext,0)


        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.OPEN_BRACKET)
            else:
                return self.getToken(pscriptParser.OPEN_BRACKET, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(pscriptParser.ExprContext,i)


        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.CLOSE_BRACKET)
            else:
                return self.getToken(pscriptParser.CLOSE_BRACKET, i)

        def DOT(self):
            return self.getToken(pscriptParser.DOT, 0)

        def variable_def_name(self):
            return self.getTypedRuleContext(pscriptParser.Variable_def_nameContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_variable_def_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def_name" ):
                listener.enterVariable_def_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def_name" ):
                listener.exitVariable_def_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def_name" ):
                return visitor.visitVariable_def_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_def_name(self):

        localctx = pscriptParser.Variable_def_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_variable_def_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.dotted_name(0)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 467
                self.match(pscriptParser.OPEN_BRACKET)
                self.state = 468
                self.expr(0)
                self.state = 469
                self.match(pscriptParser.CLOSE_BRACKET)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 476
                self.match(pscriptParser.DOT)
                self.state = 477
                self.variable_def_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_def_comma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_def_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Variable_def_nameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Variable_def_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_variable_def_comma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def_comma_name" ):
                listener.enterVariable_def_comma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def_comma_name" ):
                listener.exitVariable_def_comma_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def_comma_name" ):
                return visitor.visitVariable_def_comma_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_def_comma_name(self):

        localctx = pscriptParser.Variable_def_comma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_variable_def_comma_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.variable_def_name()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 481
                self.match(pscriptParser.COMMA)
                self.state = 482
                self.variable_def_name()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_whereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(pscriptParser.Dotted_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.DOT)
            else:
                return self.getToken(pscriptParser.DOT, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_from_where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_where" ):
                listener.enterFrom_where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_where" ):
                listener.exitFrom_where(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_where" ):
                return visitor.visitFrom_where(self)
            else:
                return visitor.visitChildren(self)




    def from_where(self):

        localctx = pscriptParser.From_whereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_from_where)
        self._la = 0 # Token type
        try:
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==43:
                    self.state = 488
                    self.match(pscriptParser.DOT)
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 494
                self.dotted_name(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 495
                    self.match(pscriptParser.DOT)
                    self.state = 498 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==43):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Dotted_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_comma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_name" ):
                listener.enterComma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_name" ):
                listener.exitComma_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_name" ):
                return visitor.visitComma_name(self)
            else:
                return visitor.visitChildren(self)




    def comma_name(self):

        localctx = pscriptParser.Comma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_comma_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.dotted_name(0)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 503
                self.match(pscriptParser.COMMA)
                self.state = 504
                self.dotted_name(0)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_comma_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_test" ):
                listener.enterComma_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_test" ):
                listener.exitComma_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComma_test" ):
                return visitor.visitComma_test(self)
            else:
                return visitor.visitChildren(self)




    def comma_test(self):

        localctx = pscriptParser.Comma_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_comma_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.test()
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 511
                self.match(pscriptParser.COMMA)
                self.state = 512
                self.test()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 513
                    self.match(pscriptParser.COMMA)
                    self.state = 514
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_def_constsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.variable_const = None # Token

        def VAR(self):
            return self.getToken(pscriptParser.VAR, 0)

        def CONST(self):
            return self.getToken(pscriptParser.CONST, 0)

        def LET(self):
            return self.getToken(pscriptParser.LET, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_variable_def_consts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def_consts" ):
                listener.enterVariable_def_consts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def_consts" ):
                listener.exitVariable_def_consts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def_consts" ):
                return visitor.visitVariable_def_consts(self)
            else:
                return visitor.visitChildren(self)




    def variable_def_consts(self):

        localctx = pscriptParser.Variable_def_constsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_variable_def_consts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            localctx.variable_const = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7696581394432) != 0)):
                localctx.variable_const = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_def_consts_with_colonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.variable_const = None # Token

        def VAR(self):
            return self.getToken(pscriptParser.VAR, 0)

        def LET(self):
            return self.getToken(pscriptParser.LET, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_variable_def_consts_with_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_def_consts_with_colon" ):
                listener.enterVariable_def_consts_with_colon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_def_consts_with_colon" ):
                listener.exitVariable_def_consts_with_colon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_def_consts_with_colon" ):
                return visitor.visitVariable_def_consts_with_colon(self)
            else:
                return visitor.visitChildren(self)




    def variable_def_consts_with_colon(self):

        localctx = pscriptParser.Variable_def_consts_with_colonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_variable_def_consts_with_colon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            localctx.variable_const = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==40 or _la==42):
                localctx.variable_const = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = pscriptParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 523
                        self.test()
                        self.state = 524
                        self.match(pscriptParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 528 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 530
                    self.test()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(pscriptParser.ExprContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = pscriptParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(pscriptParser.STAR)
            self.state = 537
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self):
            return self.getToken(pscriptParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(pscriptParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(pscriptParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(pscriptParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(pscriptParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(pscriptParser.MOD_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(pscriptParser.XOR_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(pscriptParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(pscriptParser.IDIV_ASSIGN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(pscriptParser.Yield_exprContext,0)


        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = pscriptParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 534773761) != 0)):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.state = 540
                self.yield_expr()
                pass
            elif token in [20, 24, 27, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.state = 541
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(pscriptParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = pscriptParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.expr(0)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 545
                    self.match(pscriptParser.COMMA)
                    self.state = 546
                    self.expr(0) 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 552
                self.match(pscriptParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = pscriptParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.import_as_name()
            self.state = 560
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 556
                    self.match(pscriptParser.COMMA)
                    self.state = 557
                    self.import_as_name() 
                self.state = 562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 563
                self.match(pscriptParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.NameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.NameContext,i)


        def AS(self):
            return self.getToken(pscriptParser.AS, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = pscriptParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.name()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 567
                self.match(pscriptParser.AS)
                self.state = 568
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Name_as_nameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Name_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_name_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_as_names" ):
                listener.enterName_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_as_names" ):
                listener.exitName_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_as_names" ):
                return visitor.visitName_as_names(self)
            else:
                return visitor.visitChildren(self)




    def name_as_names(self):

        localctx = pscriptParser.Name_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_name_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.name_as_name()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 572
                self.match(pscriptParser.COMMA)
                self.state = 573
                self.name_as_name()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.NameContext)
            else:
                return self.getTypedRuleContext(pscriptParser.NameContext,i)


        def AS(self):
            return self.getToken(pscriptParser.AS, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_name_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_as_name" ):
                listener.enterName_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_as_name" ):
                listener.exitName_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_as_name" ):
                return visitor.visitName_as_name(self)
            else:
                return visitor.visitChildren(self)




    def name_as_name(self):

        localctx = pscriptParser.Name_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_name_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.name()
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 580
                self.match(pscriptParser.AS)
                self.state = 581
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(pscriptParser.IF, 0)

        def ELSE(self):
            return self.getToken(pscriptParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(pscriptParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(pscriptParser.VarargslistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = pscriptParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                self.logical_test(0)
                self.state = 590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 585
                    self.match(pscriptParser.IF)
                    self.state = 586
                    self.logical_test(0)
                    self.state = 587
                    self.match(pscriptParser.ELSE)
                    self.state = 588
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.match(pscriptParser.LAMBDA)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 18014398509484163) != 0):
                    self.state = 593
                    self.varargslist()


                self.state = 596
                self.match(pscriptParser.COLON)
                self.state = 597
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(pscriptParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(pscriptParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = pscriptParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.vardef_parameters()
                    self.state = 601
                    self.match(pscriptParser.COMMA)


                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 605
                    self.varargs()
                    self.state = 608
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 606
                        self.match(pscriptParser.COMMA)
                        self.state = 607
                        self.vardef_parameters()


                    self.state = 612
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 610
                        self.match(pscriptParser.COMMA)
                        self.state = 611
                        self.varkwargs()


                    pass
                elif token in [49]:
                    self.state = 614
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 617
                    self.match(pscriptParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.vardef_parameters()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 621
                    self.match(pscriptParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = pscriptParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.vardef_parameter()
            self.state = 631
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 627
                    self.match(pscriptParser.COMMA)
                    self.state = 628
                    self.vardef_parameter() 
                self.state = 633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(pscriptParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = pscriptParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.name()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 635
                    self.match(pscriptParser.ASSIGN)
                    self.state = 636
                    self.test()


                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.match(pscriptParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = pscriptParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(pscriptParser.STAR)
            self.state = 643
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(pscriptParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = pscriptParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(pscriptParser.POWER)
            self.state = 646
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(pscriptParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(pscriptParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(pscriptParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(pscriptParser.AND, 0)

        def OR(self):
            return self.getToken(pscriptParser.OR, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = pscriptParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.state = 649
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 650
                self.match(pscriptParser.NOT)
                self.state = 651
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 660
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        localctx = pscriptParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 654
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 655
                        localctx.op = self.match(pscriptParser.AND)
                        self.state = 656
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = pscriptParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 657
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 658
                        localctx.op = self.match(pscriptParser.OR)
                        self.state = 659
                        self.logical_test(2)
                        pass

             
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(pscriptParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(pscriptParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(pscriptParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(pscriptParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(pscriptParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(pscriptParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(pscriptParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(pscriptParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(pscriptParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(pscriptParser.IN, 0)

        def IS(self):
            return self.getToken(pscriptParser.IS, 0)

        def NOT(self):
            return self.getToken(pscriptParser.NOT, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = pscriptParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = pscriptParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 668
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 684
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [62]:
                        self.state = 669
                        self.match(pscriptParser.LESS_THAN)
                        pass
                    elif token in [63]:
                        self.state = 670
                        self.match(pscriptParser.GREATER_THAN)
                        pass
                    elif token in [64]:
                        self.state = 671
                        self.match(pscriptParser.EQUALS)
                        pass
                    elif token in [65]:
                        self.state = 672
                        self.match(pscriptParser.GT_EQ)
                        pass
                    elif token in [66]:
                        self.state = 673
                        self.match(pscriptParser.LT_EQ)
                        pass
                    elif token in [67]:
                        self.state = 674
                        self.match(pscriptParser.NOT_EQ_1)
                        pass
                    elif token in [68]:
                        self.state = 675
                        self.match(pscriptParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 677
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 676
                            localctx.optional = self.match(pscriptParser.NOT)


                        self.state = 679
                        self.match(pscriptParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 680
                        self.match(pscriptParser.IS)
                        self.state = 682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 681
                            localctx.optional = self.match(pscriptParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 686
                    self.comparison(3) 
                self.state = 691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(pscriptParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(pscriptParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TrailerContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.ExprContext)
            else:
                return self.getTypedRuleContext(pscriptParser.ExprContext,i)


        def ADD(self):
            return self.getToken(pscriptParser.ADD, 0)

        def MINUS(self):
            return self.getToken(pscriptParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(pscriptParser.NOT_OP, 0)

        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def DIV(self):
            return self.getToken(pscriptParser.DIV, 0)

        def MOD(self):
            return self.getToken(pscriptParser.MOD, 0)

        def IDIV(self):
            return self.getToken(pscriptParser.IDIV, 0)

        def POWER(self):
            return self.getToken(pscriptParser.POWER, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = pscriptParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 693
                    self.match(pscriptParser.AWAIT)


                self.state = 696
                self.atom()
                self.state = 700
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 697
                        self.trailer() 
                    self.state = 702
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass

            elif la_ == 2:
                self.state = 703
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2522015791327477760) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 704
                self.expr(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = pscriptParser.ExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                    self.state = 707
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 708
                    localctx.op = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2234383549501276160) != 0)):
                        localctx.op = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 709
                    self.expr(2) 
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(pscriptParser.Yield_exprContext,0)


        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(pscriptParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(pscriptParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(pscriptParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(pscriptParser.CLOSE_BRACE, 0)

        def dictmaker(self):
            return self.getTypedRuleContext(pscriptParser.DictmakerContext,0)


        def setmaker(self):
            return self.getTypedRuleContext(pscriptParser.SetmakerContext,0)


        def REVERSE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.REVERSE_QUOTE)
            else:
                return self.getToken(pscriptParser.REVERSE_QUOTE, i)

        def COMMA(self):
            return self.getToken(pscriptParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def number(self):
            return self.getTypedRuleContext(pscriptParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(pscriptParser.MINUS, 0)

        def NONE(self):
            return self.getToken(pscriptParser.NONE, 0)

        def STRING(self):
            return self.getToken(pscriptParser.STRING, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = pscriptParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.match(pscriptParser.OPEN_PAREN)
                self.state = 718
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 716
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                    self.state = 717
                    self.testlist()
                    pass
                elif token in [87]:
                    pass
                else:
                    pass
                self.state = 720
                self.match(pscriptParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.match(pscriptParser.OPEN_BRACKET)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 722
                    self.testlist()


                self.state = 725
                self.match(pscriptParser.CLOSE_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.match(pscriptParser.OPEN_BRACE)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 18293674462937091) != 0):
                    self.state = 727
                    self.dictmaker()


                self.state = 730
                self.match(pscriptParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 731
                self.match(pscriptParser.OPEN_BRACE)
                self.state = 732
                self.setmaker()
                self.state = 733
                self.match(pscriptParser.CLOSE_BRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 735
                self.match(pscriptParser.REVERSE_QUOTE)
                self.state = 736
                self.testlist()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 737
                    self.match(pscriptParser.COMMA)


                self.state = 740
                self.match(pscriptParser.REVERSE_QUOTE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 742
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 743
                    self.match(pscriptParser.MINUS)


                self.state = 746
                self.number()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 747
                self.match(pscriptParser.NONE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 748
                self.match(pscriptParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.DictItemContext)
            else:
                return self.getTypedRuleContext(pscriptParser.DictItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_dictmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictmaker" ):
                listener.enterDictmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictmaker" ):
                listener.exitDictmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictmaker" ):
                return visitor.visitDictmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictmaker(self):

        localctx = pscriptParser.DictmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dictmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.dictItem()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 752
                self.match(pscriptParser.COMMA)
                self.state = 753
                self.dictItem()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictKey(self):
            return self.getTypedRuleContext(pscriptParser.DictKeyContext,0)


        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_dictItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictItem" ):
                listener.enterDictItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictItem" ):
                listener.exitDictItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictItem" ):
                return visitor.visitDictItem(self)
            else:
                return visitor.visitChildren(self)




    def dictItem(self):

        localctx = pscriptParser.DictItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_dictItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.dictKey()
            self.state = 760
            self.match(pscriptParser.COLON)
            self.state = 761
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(pscriptParser.NumberContext,0)


        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def STRING(self):
            return self.getToken(pscriptParser.STRING, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_dictKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKey" ):
                listener.enterDictKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKey" ):
                listener.exitDictKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictKey" ):
                return visitor.visitDictKey(self)
            else:
                return visitor.visitChildren(self)




    def dictKey(self):

        localctx = pscriptParser.DictKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dictKey)
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 81, 82, 83, 84, 85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.number()
                pass
            elif token in [38, 39, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.name()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 765
                self.match(pscriptParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_setmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetmaker" ):
                listener.enterSetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetmaker" ):
                listener.exitSetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetmaker" ):
                return visitor.visitSetmaker(self)
            else:
                return visitor.visitChildren(self)




    def setmaker(self):

        localctx = pscriptParser.SetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_setmaker)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.testlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = pscriptParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.test()
            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 771
                    self.match(pscriptParser.COMMA)
                    self.state = 772
                    self.test() 
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(pscriptParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(pscriptParser.DOT, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = pscriptParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = pscriptParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 781
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 782
                    self.match(pscriptParser.DOT)
                    self.state = 783
                    self.name() 
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(pscriptParser.NAME, 0)

        def bool_(self):
            return self.getTypedRuleContext(pscriptParser.BoolContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = pscriptParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_name)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.match(pscriptParser.NAME)
                pass
            elif token in [38, 39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                self.bool_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(pscriptParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(pscriptParser.FALSE, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_bool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool" ):
                listener.enterBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool" ):
                listener.exitBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool" ):
                return visitor.visitBool(self)
            else:
                return visitor.visitChildren(self)




    def bool_(self):

        localctx = pscriptParser.BoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_bool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            _la = self._input.LA(1)
            if not(_la==38 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(pscriptParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(pscriptParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(pscriptParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = pscriptParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_number)
        try:
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 81, 82, 83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.integer()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.match(pscriptParser.IMAG_NUMBER)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 797
                self.match(pscriptParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(pscriptParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(pscriptParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(pscriptParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(pscriptParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = pscriptParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(pscriptParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(pscriptParser.Yield_argContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = pscriptParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(pscriptParser.YIELD)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                self.state = 803
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(pscriptParser.TestlistContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = pscriptParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_yield_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.testlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(pscriptParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(pscriptParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(pscriptParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = pscriptParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_trailer)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.match(pscriptParser.DOT)
                self.state = 809
                self.name()
                self.state = 811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 810
                    self.arguments()


                pass
            elif token in [86, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(pscriptParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(pscriptParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(pscriptParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(pscriptParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(pscriptParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(pscriptParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = pscriptParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(pscriptParser.OPEN_PAREN)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522632411344273408) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 817
                    self.arglist()


                self.state = 820
                self.match(pscriptParser.CLOSE_PAREN)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.match(pscriptParser.OPEN_BRACKET)
                self.state = 822
                self.subscriptlist()
                self.state = 823
                self.match(pscriptParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(pscriptParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = pscriptParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.argument()
            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 828
                    self.match(pscriptParser.COMMA)
                    self.state = 829
                    self.argument() 
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 835
                self.match(pscriptParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(pscriptParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(pscriptParser.POWER, 0)

        def STAR(self):
            return self.getToken(pscriptParser.STAR, 0)

        def getRuleIndex(self):
            return pscriptParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = pscriptParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.test()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 839
                    self.match(pscriptParser.ASSIGN)
                    self.state = 840
                    self.test()


                pass
            elif token in [45, 49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 843
                _la = self._input.LA(1)
                if not(_la==45 or _la==49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 844
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(pscriptParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(pscriptParser.COMMA)
            else:
                return self.getToken(pscriptParser.COMMA, i)

        def getRuleIndex(self):
            return pscriptParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = pscriptParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.subscript()
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 848
                    self.match(pscriptParser.COMMA)
                    self.state = 849
                    self.subscript() 
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 855
                self.match(pscriptParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pscriptParser.TestContext)
            else:
                return self.getTypedRuleContext(pscriptParser.TestContext,i)


        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(pscriptParser.SliceopContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = pscriptParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 38, 39, 44, 56, 57, 61, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.test()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 859
                    self.match(pscriptParser.COLON)
                    self.state = 861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                        self.state = 860
                        self.test()


                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==47:
                        self.state = 863
                        self.sliceop()




                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.match(pscriptParser.COLON)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                    self.state = 869
                    self.test()


                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 872
                    self.sliceop()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(pscriptParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = pscriptParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(pscriptParser.COLON)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2522034277018763264) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 11007) != 0):
                self.state = 878
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(pscriptParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(pscriptParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(pscriptParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(pscriptParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(pscriptParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = pscriptParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_comp_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(pscriptParser.FOR)
            self.state = 882
            self.exprlist()
            self.state = 883
            self.match(pscriptParser.IN)
            self.state = 884
            self.logical_test(0)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 885
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(pscriptParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(pscriptParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(pscriptParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(pscriptParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return pscriptParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = pscriptParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_comp_iter)
        try:
            self.state = 894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(pscriptParser.IF)
                self.state = 890
                self.test()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[45] = self.logical_test_sempred
        self._predicates[46] = self.comparison_sempred
        self._predicates[47] = self.expr_sempred
        self._predicates[54] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




